
                                             day  07
===========================================================================================================

 一.集合体系结构；
       1.集合框架；
       2.Collection接口及基本方法；

 二.Iterator迭代器；
       1.Iterator接口与迭代器；
       2.Iterator接口的两个方法；
       3.并发修改异常；
       4.增强for循环；

 三.泛型；
       1.泛型的好处；
       2.泛型的定义与使用；

 四.集合综合案例；

       “斗地主”游戏模拟洗牌、发牌。

=====================================================================================

 一.集合：

   1、容器                                数组                           集合

        a.长度：                  一旦创建，长度固定；                 长度不定；
        b.存储类型：                基本数据类型                  存储的是引用数据类型
 
   2.数组的长度是固定的。集合的长度是可变的。
   3.数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。

   集合框架的由来：
           区分的方式：每一个容器的数据结构(数据存储到的一种方式)不一样。

           不同的容器不断向上抽取，集合框架就是Collection接口；
        学习不同集合时，先学习顶层，创建底层对象即可，因为底层继承了父类中的所有功能。

  ArrayList集合复习：

     1.存储数据 add()
     2.获取数据 (遍历)  get(i)
     3.每一个集合的特点
  
     数组   .length属性
     字符串  length()方法
     集合  size()方法
 
     2. Collection接口及基本方法；

           * java.util.Collection 集合层次的根接口 
           * List extends Collection
           * ArrayList implements List
 
      * Collection接口中的常用方法 ：
           * boolean  add(E e) 添加元素
           * void clear()  清空集合元素
           * boolean contains(Object obj) 判断集合是否包含某个元素
           * boolean remove(Object obj) 删除指定元素
           * int size()  获取集合的长度
           * Object[] toArray 将集合转换为数组
 

 
 二.Iterator迭代器；
  
       1.Iterator接口与迭代器；


          Collection集合元素的通用获取方式：在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，
       继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。
       
       集合中把这种取元素的方式描述在Iterator接口中。
      

       2.Iterator接口的两个方法；

            Collection 接口中的iterator:
          方法声明为：
            Iterator<集合中数据类型> 变量名=Collection集合.iterator();
	    用来返回专属于该集合对象的迭代器对象(Iterator的子类对象)。


          (1) hasNext（）方法：用来判断集合中是否有下一个元素可以迭代。如果返回true,说明可以迭代。
          (2) next（）方法：用来返回迭代的下一个元素，并把指针向后移动一位。

       3.并发修改异常；
 
           注意：在进行集合元素取出时，如果集合中已经没有元素了，还继续使用迭代器的next方法，
                 将会发生java.util.NoSuchElementException没有集合元素的错误。
                 java.util.ConcurrentModificationException
                 当迭代器在运行时，集合修改了集合的长度，抛此异常
           

       4.增强for循环；

           作用：专门用来遍历集合与数组的工具；JDK1.5以后提供的功能；
                 它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。
           格式：
                 for(集合和数组中存储的元素的数据类型  变量名 :要遍历的 Collection集合or数组){ }

           注意：只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作。

                 增强for循环和老式的for循环有什么区别？

           注意：新for循环必须有被遍历的目标。目标只能是Collection或者是数组。

           建议：遍历数组时，如果仅为遍历，可以使用增强for如果要对数组的元素进行 操作，使用老式for循环可以通过角标操作。


 三.泛型；
       介绍：
             泛型可以定义在类 接口 方法中 将数据类型作为参数传递
             泛型的定义:可以预先使用未知的类型
             泛型的使用:一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。

       1.泛型的好处；
                    1.去掉了警告。
                    2.将运行时期的ClassCastException，转移到了编译时期变成了编译失败。
                    3.避免了类型强转的麻烦。



       2.泛型的定义与使用；

           A. 泛型类
              格式：    public class 类名<接收数据类型的变量>{ }
   
       何时确定类型：   泛型类在创建对象时确定下来泛型的数据类型
               
           B. 泛型方法 
                
              格式：   修饰符 <变量> 返回值类型  方法名(参数){ }
                 	
      何时确定类型：   调用方法传递参数时确定了泛型的数据类型

           C. 泛型接口

              格式：   public interface 接口名<变量>{ }
   
      何时确定类型：   1.定义实现类时，确定下来泛型的类型
                       2.定义实现类时，不确定泛型的类型，创建实现类对象时，确定类型


       3.泛型通配符：？

         泛型的限定
 
                （1）  ? extends Animal   上限限定     Animal及其子类
                （2）  ? super   Animal   下限限定     Animal及其父类

 
 四.集合综合案例；

       “斗地主”游戏模拟洗牌、发牌。

        练习敲懂“斗地主”游戏洗牌、发牌的代码：重点：“从字面需求分析理解代码实现结构，细节实现方法。”





