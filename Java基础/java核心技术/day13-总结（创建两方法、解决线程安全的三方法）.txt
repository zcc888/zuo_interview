

                                       day 13  多线程【Thread、线程创建】


==========================================================================================================

一、Thread的简介：
    1.解释进程、（多）线程及调度原理；
    2.主线程；

二、Thread类的创建：
    1.掌握使用继承类的方式创建多线程；
    2.掌握使用实现接口的方式创建多线程；
    3.能够说出实现接口方式的好处；

三、线程安全问题：
    1.能够解释安全问题的出现的原因；
    2.使用同步代码块解决线程安全问题；
    3.使用同步方法解决线程安全问题；
    4.说出线程5个状态的名称：新建-执行-消亡（阻塞-休眠-等待）

-----------------------------------------------------------------------------------

一、Thread的简介：
 
  01概念讲解：
             1.进程：操作系统中，处于正在运行中的程序；具有一定独立功能；//应用程序；迅雷、浏览器、QQ管家；
         
             2.多进程：指主机支持多个程序同时运行，提高了用户的体验度；
             
             3.线程：线程是进程中的一个执行单元，一个程序运行至少有一个进程，一个进程可以包含多个线程；
            
             4.多线程：一个程序中有多个线程在同时执行；多线程提高程序的运行效率。

             5.并行：指多个线程在某个时间段内，同时运行。
	     
             6.并发：指多个线程同一时刻在访问某一共同资源，这时对于这个资源来说就是：受到了并发访问。


  02.Java多线程原理
	1.分时调度：操作系统轮流为每个进程(线程)平均分配CPU执行时间。
                    
	2.抢占式调度：操作系统会根据线程的优先级决定哪些线程会优先执行。
          实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。
	  Java就是抢占式调度，可以设定线程的优先级。



  03.主线程

        1.当我们运行一个main()方法时，JVM会启动并加载执行main()，整个的运行对于操作系统来说就是一个"进程"。
	  我们的main()方法对于我们的整个程序来说就是一个"主线程"。
	2.我们之前的程序都是"单线程程序"，特点：从main()第一行开始执行，一直到最后一行代码结束，这就是单线程程序。
	  特点就是后面的代码总要等待前面的代码执行完毕，才能获得执行。
	3.多线程程序的特点：可以让我们的代码有多个执行路径，大大提高程序的运行效率。 

二、Thread类的创建：
    1.掌握使用继承类的方式创建多线程；
             
         （1）.定义一个子类继承Thread类
         （2）.需要重写Thread类run方法 (想在线程中执行什么就写什么   线程任务)
         （3）.创建并开启一条线程；
 	    方法：
  		start()  开启线程 JVM自动调用run方法
  		getName() 返回当前线程名称
  		static Thread currentThread() 获取当前线程对象
  		setName(String name) 设置线程名称 主线程不可以设置（一般不用，没人会去命名线程）
            步骤：
                 1).start 和 run方法的区别
                 2).start方法开启线程后，JVM会调用run方法。
                 3).run方法就是一个普通方法，里面定义了线程任务。如果直接调用run方法程序还是一个单线程程序；

   注意:继承Thread类原理：
                 （1）.继承Thread类：因为Thread类用来描述线程，具备线程应该有功能。

                 （2）.Thread类run方法中的任务并不是我们所需要的，只有子类重写这个run方法，定义我们需要让线程执行的代码。

                 （3）.创建线程的目的：为了建立程序单独的执行路径，让多部分代码实现同时执行。

   获取线程名称：
                 Thread.currentThread()获取当前线程对象
                 Thread.currentThread().getName();获取当前线程对象的名称

    2.掌握使用实现Runnable接口的方式创建多线程；
  
            创建线程的步骤。
                     1、定义类实现Runnable接口。
                     2、覆盖接口中的run方法。。
                     3、创建Thread类的对象
                     4、将Runnable接口的子类对象作为参数传递给Thread类的构造函数。
                     5、调用Thread类的start方法开启线程。

 	       参数:
  		     Runnable 需要的是接口 但是可以传入其实现类对象

    实现Runnable的原理：

    3.能够说出实现接口方式的好处；

         （1）实现Runnable接口，避免了继承Thread类的单继承局限性。覆盖Runnable接口中的run方法，将线程任务代码定义到run方法中。
         （2）第一种方式继承Thread类，线程对象和线程任务耦合在一起。既是线程对象，又是线程任务；

         （3）实现runnable接口，将线程任务单独分离出来封装成对象，类型就是Runnable接口类型。
               Runnable接口对线程对象和线程任务进行解耦。



          匿名内部类创建线程
  
  匿名内部类作用:临时创建一个类的子类对象
  new 父类/接口(){
  		
  		重写方法

            }；
                  new Thread() {
			public void run() {
				for (int x = 0; x < 40; x++) {
					System.out.println(Thread.currentThread().getName()
							+ "...X...." + x);
				}
			}
		}.start();

第二种实现Runnable接口：   Runnable r = new Runnable() {
			public void run() {
				for (int x = 0; x < 40; x++) {
					System.out.println(Thread.currentThread().getName()
							+ "...Y...." + x);
				}
			}
		};
		new Thread(r).start();

 三、线程安全问题：

    1.能够解释安全问题的出现的原因；
      多个线程同时运行同一段代码的结果，与单个线程单独运行结果不同，这就是线程安全问题。

     原因：线程安全问题都是由全局变量及静态变量引起的。
          多线程执行过程中，某一线程执行发生阻塞，下次抢占资源失败，其余线程执行，发生变量冲突； 

   public class Ticket implements Runnable {
	//共100票
	int ticket = 100;

   //定义锁对象
	Object lock = new Object();

       @Override
	public void run() {
		//模拟卖票
		while(true){
    1.添加同步代码块: synchronized (lock){
			if (ticket > 0) {
				//模拟选坐的操作
				try {
					Thread.sleep(1);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				System.out.println(Thread.currentThread().getName() + "正在卖票:" + ticket--);
			}
                   }
		}
	}

         Ticket ticket = new Ticket();
		
		//创建3个窗口
		Thread t1  = new Thread(ticket, "窗口1");
		Thread t2  = new Thread(ticket, "窗口2");
		Thread t3  = new Thread(ticket, "窗口3");
		
		t1.start();
		t2.start();
		t3.start();
  Java中提供了线程同步机制，它能够解决上述的线程安全问题。
 	线程同步的方式有两种：
        方式1：同步代码块
        方式2：同步方法

    2.使用同步代码块解决线程安全问题；

           同步代码块: 在代码块声明上 加上synchronized
                       synchronized (同一锁对象：常用this) {
                           
                    会产生线程安全问题的代码
                             }

    //定义锁对象
	Object lock = new Object();

        同步代码块中的锁对象可以是任意的对象；但多个线程时，要使用同一个锁对象才能够保证线程安全。

    3.使用同步方法解决线程安全问题；

        同步方法：在方法声明上加上synchronized

       public synchronized void method(){

   	可能会产生线程安全问题的代码

           }

	同步方法中的锁对象是 this。

          //同步方法,锁对象this
	public synchronized void method(){
		if (ticket > 0) {
			//模拟选坐的操作
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(Thread.currentThread().getName() + "正在卖票:" + ticket--);
		}
	}
}

    4.说出线程5个状态的名称：新建-执行-消亡（阻塞-休眠-等待）


    线程同步解决线程数据不安全
  同步方法
  在方法的返回值前加入关键字 synchronized
  
  同步方法有锁吗？ 有  锁是谁？ this
  同步方法可以是静态的吗？ 可以 
  锁还是this吗？ 不是
  锁对象是谁？ 类名.class  每一种类型（包括基本类型） 都有一个静态属性 class


 六、Lock解决线程不安全问题  JDK 1.5

            ReentrantLock implements Lock
        构造方法
  		ReentrantLock()
  
            方法
  		lock()  获取锁
  		unLock() 释放锁

      public class Ticket implements Runnable {
	//共100票
	int ticket = 100;
	
	//创建Lock锁对象
	Lock ck = new ReentrantLock();
	
	@Override
	public void run() {
		//模拟卖票
		while(true){
			//synchronized (lock){
			ck.lock();
				if (ticket > 0) {
					//模拟选坐的操作
					try {
						Thread.sleep(10);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					System.out.println(Thread.currentThread().getName() + "正在卖票:" + ticket--);
				}
			ck.unlock();
			//}
		}
	}
}








































































