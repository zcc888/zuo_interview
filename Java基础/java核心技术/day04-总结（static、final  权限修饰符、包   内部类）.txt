                                     DAY04
=============================================================================================================

static 关键字

 final  关键字

 四种权限修饰符 
 
 包的声明、使用、导包

 内部类（成员、局部内部类）


 一、static 关键字 
 
 1.static 静态修饰符，被static修饰的内容（修饰类的成员：变量、方法），多个对象可以共享； 
 2.被static修饰的成员属于类，不属于单个的某个对象；
 3.被修饰的成员可以并建议使用类名直接访问；
      类名.静态成员变量名
      类名.静态成员方法名（参数）
 4.不能在static环境中，调用非static变量，因为这个变量还未创建出来；//要想调用某个方法，把这个方法用static修饰；
 
static注意事项
 * 		静态内容是随着类的加载而加载，优先于对象存在。静态内容只能访问静态内容。
 * 		静态不能使用this、super。

   注意：不建议使用对象调用静态成员，报警告，无法区别普通成员与静态成员；

 
 二、代码块：一块执行代码的区域
 
   代码块（静态代码块、构造代码块、局部代码块）

  （一）.静态代码块
       1.静态代码块位置：定义在类中，main方法及成员方法外；
       2.运行时间及顺序：随着类的载入（1.第一次创建对象；2.第一次访问静态成员）而执行，而且只执行一次；
       3.格式：

            static {

            System.out.println("这是静态代码块");

              }


  （二）.构造代码块 

       1.位置：定义在类中成员位置，与其他成员并列；
       2.运行时间及顺序：每次创建对象时，就会被执行一次；
          
  （三）.局部代码块
       1.被大括号括起来的代码,位于方法内；
       2.限定变量的作用范围；

 
 三.final 关键字
   1.关键字 final 最终修饰符 :最终的，不可变的；可以修饰类，变量，成员方法；
   A.final修饰的类 不可以被继承，但可以继承其他类；
   B. final修饰的方法 :不可以被重写覆盖；
   C.final 修饰的变量无法被再次赋值，变成了常量；

   D.final修饰的变量不可变，是指引用变量不可变，而这个引用变量指向的对象的内容可以变；
   E.final 修饰的常量的命名规则 ：所有字母均大写，多个单词用下划线连接；

 final的注意事项
 * 	1.final修饰引用数据类型 地址值不可以修改，但是对象的属性值可以修改
 * 	2.final修饰成员变量，必须在创建对象之前赋值(要么 显示赋值，要么每个构造方法中赋值)

     注意：关键字final和static 均不能与abstract配合使用，static不与private共用；
           abstract修饰的类需要被继承，被修饰的方法需要重写，这与final关键字语法矛盾；
           static修饰的方法和变量是不可变的，不能被修改的，也与abstract语法矛盾；

 四.四种权限修饰符
    权限大小：；public>protected>空的（默认  什么都不写default）>private

    1.同一类中可以调用，超出本类不能直接调用（提供get/set方法）：使用private修饰；
    2.同一包下的其他类可以调用，超出本包不能使用：默认什么都不写；
    3.其他包下的子类也可以使用：使用protected修饰；
    4.其他包的无关类也可以调用：使用public修饰；


 五.包的声明  使用  导包

    两个与包有关的关键字  package （声明） ――― import（导包）
 
   （一）、包的声明
         1.包是Java中文件管理的基本方式，用于将相关功能的类放在一起，方便管理，即分包管理；
         2.声明：在类的有效代码的第一行进行类所在包的声明，声明的包必须与文件所在的文件夹一致，否则找不到文件
         格式如下：
               package xx.xx.xx;
         3. 包的命名一般采用 公司域名的反写：避免包重名。（包名全采用小写字母）

   （二）、包的使用
         1.当要使用的类不在当前包下，需要进行类的包全路径调用：
          java.util.Scanner;
          java.util.Random;
         java.util.ArrayList<java.lang.String>  list=new java.util.ArrayList<java.lang.String>();
         2.java的lang包下的文件，不需要全路径和导包，就可以直接使用；
     
    (三)、导包
         1.java提供了一种快捷访问方式，即先导包，后调用

          import java.util.Scanner;
          import java.util.Random;
          import java.util.ArrayList;
          Scanner sc=new Scanner(System.in);
          Random r=new Random();
          ArrayList<String> list=new ArrayList<>();
 
 六.内部类（成员内部类   局部内部类）
  
    内部类：定义在一个类内部的一个类叫内部类   根据位置不同分为：成员内部类和局部内部类两种；

   （一）、匿名内部类：是局部内部类的一种；
    
    前提：具有子类继承父类或类实现接口；
          
          匿名内部类完成了两件事：

          1.定义了一个类型的匿名子类；
          2.定义类的同时，完成创建该类的对象；
           （即匿名内部类：是创建的子类的对象）
    目的：为了创建某个类的子类对象；
    格式：
           new 父类/接口{
             
                   重写方法
           };
       