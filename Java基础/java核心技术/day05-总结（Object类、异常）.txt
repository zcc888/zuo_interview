

                                          DAY05    Object类   异常
===================================================================================================

  
 一 、 Object类  （一、toString方法； 二、equals()方法）

   Object类：java.lang.Object 所有类的根类  Object类中有的方法子类都有；
   在Object类众多方法中，我们先学习equals（）方法与toString（）方法。

（一）String toString()方法
          toString()方法：返回该对象的字符串表示：   该对象的数据类型 + @ + 哈希值(地址值)
      由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，
      因此子类可以重写方法以得到对象的属性的字符串形式。
 注：
      String str="字符串"；
      System.out.println(str);直接使用输出语句输出对象时，通过该对象（str）调用了其str.toString()方法。
   重写toString()方法在eclipse里也有快捷键生成.Alt+Shift+s--->“松开”----->S

（二） boolean equals(Object obj) 方法：
        比较两个对象是否相等  在Object类中比较的是两个对象的地址值是否相同，实际调用的是“==”。
    实际开发过程子类可以重写equals()方法，用于比较两个对象的属性内容是否相等。

    注意:子类在重写Object类中的equals()方法时，注意 public boolean equals(Object obj)的参数是Object类型；

     ** ** 在调用对象的属性时，一定要进行类型转换，在转换之前必须进行类型判断。** **

         重写equals()方法可以使用 eclise 提供的快捷键直接生成。Alt+Shift+s--->“松开”----->H

    运算符一般只能运算基本类型； “==”可以操作引用类型 ，任何时刻“==”比较的都是地址值。

 Object类的其他方法：
   （1） protected void finalize()：
         当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。
   （2） Class getClass()：
         获取一个运行时对象的数据类型。调用方法返回此对象运行时类的 Class 对象。

  


      二、异常

      （一）异常概念、分类

             异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。
             Java处理异常的方式是中断处理。
         
     异常分类：
              异常的根类是Throwable，其下有两个子类：Error(错误)与Exception（异常），平常所说的异常指Exception。     


     	      Error：严重错误，无法通过处理的错误，必须修改代码。
	      Exception：编译时异常，编译时无法编译通过。如日期格式化异常，可以处理；
	      RuntimeException：运行时异常，是Exception的子类，运行时可能会报错，可以处理，可以不处理。
              实际开发时，推荐不处理。如数学异常；

     //异常基本操作：
 
     //  1、 创建异常对象（JDK已定义的异常会自动创建对象，自定义异常需要手动创建）。

     //  2、 抛出异常（JDK已有定义的异常会自动抛出异常，自定义异常需要手动抛出）。

     //  3、处理异常：
     	*          捕获处理，将异常获取，使用try/catch做分支处理
	*		try{
	*			需要检测的异常；
        *               }  catch(异常对象) {
	*                    异常处理代码
	*                 可以调用异常的方法
	*            通常我们只使用一个方法：printStackTrace打印异常信息
        *           }
	*	声明抛出处理，出现异常后不处理，声明抛出给调用者处理。
	*		方法声明上加throws  异常类名。

     //  注意：异常处理，指处理的一种可能性，即有了异常处理的代码，不一定会产生异常。
               如果没有产生异常，则代码正常执行，如果产生了异常，则中断当前执行代码，执行异常处理代码。

      （二）第一种异常处理的方式：  声明异常
 
              两个关键字：  声明异常：throws ； 抛出异常：throw ；
          
             1、 throws 声明异常关键字:将问题标识出来，报告给调用者。

       注：如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明。
             
           如果方法内通过throw抛出了编译时异常，而没有捕获处理（稍后讲解该方式），那么必须通过throws进行声明，让调用者去处理。。

              （1）throws 一般定义方法（主方法、成员方法等）的声明上，后面跟的是异常的类名。
              （2）格式：修饰符 返回值类型 方法名（参数） throws 异常类名1，异常类名2… {   }。
                   如： public static int getLast(int[] arr) throws FileNotFoundException,Exception{}
              （3）throws在声明异常时，可以同时声明多个异常 多个异常使用“,”隔开。
                也可以声明所有抛出异常的共同父类。

             2、throw  抛出异常关键字

                throw关键字：在方法中，用来抛出一个指定的异常对象。抛出一个异常具体如何操作呢？
              （1）创建一个异常对象,封装一些提示信息(信息可以自己编写)。
	      （2）需要将这个异常对象告知给调用者（哪里调用就把异常返还给谁）。
               使用位置：方法内；
               使用格式：throw new 异常类名(参数);
	       例如：
                    throw new NullPointerException("要访问的arr数组不存在");
                    throw new ArrayIndexOutOfBoundsException("该索引在数组中不存在，已超出范围");

        注：throw用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。



      （三）第二种异常处理的方式：  捕获异常   try…catch…finally

               捕获：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理
               捕获异常格式：
                            try {
	                        //需要被检测的语句，可能出现异常的代码。
                                }	
                            catch(异常类名 变量名) { //参数。
	                          //异常的处理语句。
                                    打印异常的信息
                              }
                            finally {
	                         必须执行的代码：无论是否有异常，无论是否捕获了异常，finally都必须执行。
                            }

               try：该代码块中编写可能产生异常的代码。
               catch：用来进行某种异常的捕获，实现对捕获到的异常进行处理。
               finally：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。
               而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。



      （四）异常注意事项

            1.多异常处理：
              1.多catch异常处理
                 try{
 
                 }catch(){
  
                 }catch(){
 
                 }...
 
                多个异常之间是否有顺序呢？
		如果没有直接的继承关系，没有顺序
 		如果有直接的继承关系，有顺序 ，越大的放到最后。

     注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，
          那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。


            2.异常出现后的方法重写细节

              （1）运行时异常被抛出可以不处理。即不捕获也不声明抛出。
	      （2）如果父类抛出了多个异常,子类覆盖父类方法时,只能抛出相同的异常或者是它的子集。
	      （3）父类方法没有抛出异常，子类覆盖父类该方法时也不可抛出异常。此时子类产生该异常，只能在方法内捕获处理，不能声明抛出。
	      （4）当多异常处理时，捕获处理，前边的类不能是后边类的父类。
	      （5）在try/catch后可以追加finally代码块，其中的代码一定会被执行，通常用于资源回收（IO流中用于关闭输入输出流，释放系统资源）。

            3.Throwable的三个方法
              String toString()  java.io.FileNotFoundException: 文件没找到
              String getMessage()  "文件没找到"
              void printStackTrace()  打印异常的详细信息  包括位置 类名 等等





       第3章	自定义异常
   

        开发需求：
         
               发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过, 
               例如年龄负数问题,考试成绩负数问题.那么能不能自己定义异常呢？

        （1）之前的几个异常都是java通过类进行的描述。并将问题封装成对象，异常就是将问题封装成了对象。

        （2）可以模拟Java的这种机制，我们自己定义异常的信息，异常的名字，让异常更符合自己程序的阅读。



     （一）、自定义异常类的定义

           1、java中所有的异常类，都是继承Throwable，或者继承Throwable的子类。这样该异常才可以被throw抛出。
              查阅异常子类源码，发现每个异常中都调用了父类的构造方法，把异常描述信息传递给了父类，让父类帮我们进行异常信息的封装。
              
              （1）创建自定义异常类，让它继承Throwable或者Throwable的子类Exception，这样它才能被抛出。  //可抛性

              （2）自定义异常类的构造方法，调用父类的构造方法，才能把异常信息传递给父类，完成异常信息的封装。//信息封装性

           如果异常继承了Exception就是编译时异常
           如果异常继承了RuntimeException就是运行时异常

           2、编译时异常 Exception： 编译时报错，必须得处理

              运行时异常 RuntimeException：
 	            编译时 不报错，运行时报错。 可以处理也可以不处理 ，一般推荐不处理 因为如果出现了运行时异常通常都是代码出现了问题， 
	            需要修改代码。



